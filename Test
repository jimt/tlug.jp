#!/usr/bin/env bash
set -e -o pipefail
trap 'x=$?; echo 1>&2 "FAILED ($x)."; exit $x' 0

relbranch=gh-pages

die() { local exitcode="$1"; shift; echo 1>&2 "$@"; trap '' 0; exit $exitcode; }

#   Install Haskell Stack if necessary and ensure it's in $PATH.
install_or_upgrade_stack() {
    local stackbin=~/.local/bin
    export PATH="$PATH:$stackbin"

    #   Don't try to upgrade a non-clean build more than once per hour.
    local ts_file="$basedir/.stack-work/stack-upgrade-timestamp"
    local ts=$(stat --format "%Y" "$ts_file" 2>/dev/null)
    : ts=${ts:=0}
    local age=$(( $(date '+%s') - $ts))
    [[ $age -lt 3600 ]] && return 0     # Don't check more than once per hour.

    mkdir -p "$stackbin"

    stack upgrade || stack --version 2>/dev/null || {
        echo "Installing stack to $stackbin/"
        echo "This may need to sudo to install additional OS packages."
        curl -sSL https://get.haskellstack.org/ | sh -s - -d "$stackbin"
    }

    mkdir -p "$(dirname "$ts_file")"
    touch "$ts_file"
}

usage() {
    local errmsg="$@"
    [[ -n $errmsg ]] && echo 1>&2 "Argument error: $errmsg"
    echo 1>&2 "Usage: $(basename "$0") [options]"
    echo 1>&2 "Options:"
    echo 1>&2 "  -C  clean build (cleans this project, not Stack dependencies)"
    echo 1>&2 "  --branch-release  commit built site to gh-pages branch"
    exit 2
}

commit_release_branch=false
while true; do case "$1" in
    -C)                 shift; git clean -fdX;;
    --branch-release)   shift; commit_release_branch=true;;
    -h|--help)          shift; usage;;
    -*)                 usage "unknown option: '$1'";;
    *)                  break;;
esac; done
[[ ${#@} -eq 0 ]] || usage "extra arguments:" "$@"

basedir=$(cd "$(dirname "$0")" && pwd -P)
cd "$basedir"

install_or_upgrade_stack
stack build
#   `site build` does an incremental build that assumes that the site
#   compiler hasn't changed. We need `rebuild` in case it has. (An
#   optimization would be to detect whether the site compiler has
#   changed or not.)
stack exec site rebuild

$commit_release_branch && {
    echo "Committing built site in _site/ to $relbranch"
    bin/git-commit-filetree "$relbranch" _site/
}

trap '' 0
