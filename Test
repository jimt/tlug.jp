#!/usr/bin/env bash
set -e -o pipefail
trap 'echo 1>&2 FAILED.; exit 1;' 0

basedir=$(cd "$(dirname "$0")" && pwd -P)
cd "$basedir"

show_cache() {
    echo ========== $netlify_cachedir
    ls -la $netlify_cachedir || true
    du -hs $netlify_cachedir || true
    du -hs $netlify_cachedir/stack $netlify_cachedir/stack-work || true
}


#   Netlify caches neither ~/.stack/ which contains our downloaded GCC
#   and builds of downloaded packages, nor .stack-work, which contains
#   the build of this project. Since a full build takes more than the
#   half-hour build time limit of the Netlify robot, we need to move
#   these to some place that will be saved when we're building on
#   Netlify. (We don't want to do this otherwise.) We use the undocumented
#   /opt/build/cache/ directory for this. See:
#     https://www.contentful.com/blog/2018/05/17/faster-static-site-builds-part-one-process-only-what-you-need/
#     https://github.com/netlify/build-image
#
netlify_cachedir=~/.cache
show_cache  # XXX
if [[ $HOME = /opt/buildhome && -n $NETLIFY_IMAGES_CDN_DOMAIN ]]; then
    echo ===== Linking cache dirs for Netlify
    mkdir -p "$netlify_cachedir/stack" "$netlify_cachedir/stack-work"
    ln -s "$netlify_cachedir/stack/" ~/.stack
    ln -s "$netlify_cachedir/stack-work/" .stack-work
fi

#echo ========== /opt/build/cache/
#ls -la /opt/build/cache/
echo ========== Creating keep files
echo keep > $netlify_cachedir/stack/KEEP || true
echo keep > $netlify_cachedir/stack-work/KEEP || true
show_cache  # XXX
echo ========== HOME=$HOME
#ls -al ~
echo ========== cwd=$(/bin/pwd -P).
#ls -al
echo ========== ENV
#env
echo ==========
sleep 5             # Allow Netlify to finish logging
trap '' 0; exit 0   # Exit with success to see if that saves the cache.

mkdir -p ~/.local/bin/
export PATH=~/.local/bin:$PATH
stack --version \
    || curl -sSL https://get.haskellstack.org/ | sh -s - -d ~/.local/bin

stack upgrade
stack build
stack exec site build 

trap '' 0
