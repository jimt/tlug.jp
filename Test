#!/usr/bin/env bash
set -e -o pipefail
trap 'x=$?; echo 1>&2 "FAILED ($x)."; exit $x' 0

relbranch=gh-pages
saspreload_url=file:///dev/null

die() { local exitcode="$1"; shift; echo 1>&2 "$@"; trap '' 0; exit $exitcode; }

#   Install Haskell Stack if necessary and ensure it's in $PATH.
install_stack() {
    stackbin=~/.local/bin
    mkdir -p "$stackbin"
    export PATH=~/.local/bin:$PATH
    stack --version 2>/dev/null || {
        echo "Installing stack to $stackbin/"
        echo "This may need to sudo to install additional OS packages."
        curl -sSL https://get.haskellstack.org/ | sh -s - -d "$stackbin"
    }
}

commit_release_branch=false
sasbuild=''     # Set: do build using _sastack instead of user's Stack
saspreload=''   # Set: test preload of _sastack; implies -b
while true; do case "$1" in
    --branch-release)       shift; commit_release_branch=true;;
    -b|--sastack-build)     shift; sasbuild=1;;
    -p|--sastack-preload)   shift; saspreload=1; sasbuild=1;;
    -*)                     die 2 "Error: unknown option: '$1'";;
    *)                      break;;
esac; done
[[ ${#@} -eq 0 ]] || die 2 "Error: extra arguments:" "$@"

basedir=$(cd "$(dirname "$0")" && pwd -P)
cd "$basedir"

if [[ -n $sasbuild || -x _sastack/sastack-setup ]]; then
    #   Note we assume that build services will automatically check out
    #   the submodule, letting sastack determine how to set up Stack.
    eval $(
        _sastack/sastack-setup \
            ${sasbuild:+-b _sastack/stackroot} \
            ${saspreload:+-p "$saspreload_url"} \
    )
else
    #   The user has chosen not to check out the submodule and is not
    #   explicitly requesting its use, so do a normal net install of
    #   Stack (if necessary) using its default/existing configuration.
    install_stack
fi
stack upgrade
stack build
stack exec site build

$commit_release_branch && {
    echo "Committing built site in _site/ to $relbranch"
    bin/git-commit-filetree "$relbranch" _site/
}

trap '' 0
